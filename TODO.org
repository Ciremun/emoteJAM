- [-] Release
  - [ ] Add "Hard" Filter
  - [X] Add support section
- [ ] Beta
  - [ ] "Download" button
  - [ ] Widget elements are too small
  - [ ] Development Server Script
  - [ ] Handle "uploading" incorrect image
    - Nothing particularly bad happens when you upload incorrect image
      it would just look a bit more polished if the website at least
      tried to handle that case
  - [ ] Logo
    - Use the Logo as the test image (instead of tsodinClown) and as the favicon
  - [ ] Dark Theme
  - [ ] Timing of the animation is screwed on blur event
  - [ ] Customize parameters of the GIF rendering
    - [ ] FPS
    - [ ] Quality
    - [ ] Resolution
    - [ ] Custom transparency color
    - ...
  - [ ] Special built-in "clean up" filters that are always applied before handing the texture to the preset shaders
    - Like the one we did to remove weird pixels from Jebaited
    - Flipping the image (horizontally/vertically)
    - Changing the tint
  - [ ] Original aspect ratio of the input image is not preserved
    - I guess it should be solved on the level of the "filters"
      - So we need to pass the size of the textures to the filters as uniforms
  - [ ] More filters
    - [ ] 3D cube filter
- [ ] Back-burner
  - [ ] Fork and rewrite gif.js in WebAssembly
    - Also get rid of the old coffee stuff
  - [ ] "Render & Upload to BTTV" button (should just automatically
    upload the newly generated emote on your BTTV account)
  - [ ] Download existing emotes from BTTV, FFZ and Twitch (by just name since it's unique for the whole platform)
  - [ ] Drag and drop image files
  - [ ] Custom shaders
    - Some random ideas
      - Store shaders in local storage
      - Store shaders in something gist
      - Export/import presets as a JSON file
  - [ ] Preset parameters
    - This is more for people who don't know shaders. Presets may have
      special custom parameters that can be modified with UI elements.
  - [ ] Ability to pause the animation
  - [ ] Support for GIFs as an input
    - I think you can access individual frames of the GIF image. We
      may try to turn each of them into a GL texture and animate
      properly in the WebGL view
  - [ ] Get rid of the "Render" buttons
    - Just rerender every time something changes
      - With WebAssembly sped up gif.js this will be especially nice
  - [ ] Smooth progress report on the first phase of the emote
    rendering (the OpenGL one)
